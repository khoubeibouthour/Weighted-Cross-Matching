screen
grace
R
rm(list = ls())

#====================================================================================================================================

library("curl", lib.loc="~/work/RLibs")
library("httr", lib.loc="~/work/RLibs")
library("devtools", lib.loc="~/work/RLibs")
library("RCurl", lib.loc="~/work/RLibs")
library("h2o", lib.loc="~/work/RLibs")

#====================================================================================================================================

h2o.init(nthreads = -1, min_mem_size="500G")
h2o.removeAll()

#====================================================================================================================================

dataset.1.1 = h2o.importFile(path="/home/kbouthou/work/dataset/s10")			# ONLY FV with loose thresholds
dataset.1.1 = dataset.1.1[,-c(4,5,6,7,8,9,10,11)]
dataset.1.1$response = as.factor(dataset.1.1$response)

#====================================================================================================================================

splits.1.1 = h2o.splitFrame(dataset.1.1, c(0.6,0.2), seed=1234)
train.1.1  = h2o.assign(splits.1.1[[1]], "train.1.1.hex")
valid.1.1  = h2o.assign(splits.1.1[[2]], "valid.1.1.hex")
test.1.1   = h2o.assign(splits.1.1[[3]], "test.1.1.hex")
response = "response"
predictors.1 <- setdiff(names(dataset.1.1), response)

#====================================================================================================================================

trainedDL.1.1 = h2o.deeplearning(
	model_id="dl_model_1_1",
	training_frame=train.1.1,
	validation_frame=valid.1.1,
	x=predictors.1,
	y=response,
    nfolds=10,
	#activation="Rectifier",  ## default
	#hidden=c(200,200),       ## default: 2 hidden layers with 200 neurons each
	epochs=1,
	variable_importances=T    ## not enabled by default
)
trainedDL.1.1.path = h2o.saveModel(object=trainedDL.1.1, path="/home/kbouthou/work/dataset/models", force=TRUE)

#====================================================================================================================================

trainedGBM.1.1 = h2o.gbm(
	model_id = "gbm_model_1_1",
	training_frame = train.1.1,
	validation_frame = valid.1.1,
	x=predictors.1,
	y=response,
	seed = 2000000,
	nfolds=10
)
trainedGBM.1.1.path = h2o.saveModel(object=trainedGBM.1.1, path="/home/kbouthou/work/dataset/models", force=TRUE)

#====================================================================================================================================

trainedDRF.1.1 = h2o.randomForest(
    model_id="drf_model_1_1",
    training_frame=train.1.1,
    validation_frame=valid.1.1,
    nfolds=10,
    x=predictors.1,
    y=response,
    keep_cross_validation_predictions=FALSE,
    keep_cross_validation_fold_assignment=FALSE,
    score_each_iteration=FALSE,
    score_tree_interval=0,
    fold_assignment="AUTO",
    fold_column=NULL,
    ignore_const_cols=TRUE,
    offset_column=NULL,
    weights_column=NULL,
    balance_classes=FALSE,
    class_sampling_factors=NULL,
    max_after_balance_size=1,
    max_hit_ratio_k=0,
    ntrees=5,
    max_depth=3,
    min_rows=1,
    nbins=20,
    nbins_top_level=1024,
    nbins_cats=1024,
    stopping_rounds=0,
    stopping_metric="AUTO",
    stopping_tolerance=0.001,
    max_runtime_secs=0,
    seed=-1,
    build_tree_one_node=FALSE,
    mtries=-1,
    sample_rate=0.6320000291,
    sample_rate_per_class=NULL,
    binomial_double_trees=TRUE,
    checkpoint=NULL,
    col_sample_rate_change_per_level=1,
    col_sample_rate_per_tree=1,
    min_split_improvement=1e-05,
    histogram_type="AUTO",
    categorical_encoding="AUTO",
    calibrate_model=FALSE
)
trainedDRF.1.1.path = h2o.saveModel(object=trainedDRF.1.1, path="/home/kbouthou/work/dataset/models", force=TRUE)

#====================================================================================================================================

trainedGLM.1.1 = h2o.glm(
	model_id="glm_model_1_1",
	training_frame=train.1.1,
	validation_frame=valid.1.1,
	x=predictors.1,
	y=response,
	family='binomial',
	lambda=0
)
trainedGLM.1.1.path = h2o.saveModel(object=trainedGLM.1.1, path="/home/kbouthou/work/dataset/models", force=TRUE)

#====================================================================================================================================
# Accuracy

pred = h2o.predict(trainedDL.1.1, test.1.1)
meanDL.1.1 = pred$predict == test.1.1$response

pred = h2o.predict(trainedGBM.1.1, test.1.1)
meanGBM.1.1 = pred$predict == test.1.1$response

pred = h2o.predict(trainedDRF.1.1, test.1.1)
meanDRF.1.1 = pred$predict == test.1.1$response

pred = h2o.predict(trainedGLM.1.1, test.1.1)
meanGLM.1.1 = pred$predict == test.1.1$response

#====================================================================================================================================
# Confusion matrix

h2o.confusionMatrix(trainedDL.1.1)
h2o.auc(trainedDL.1.1, valid=TRUE)
h2o.confusionMatrix(trainedDL.1.1, newdata=test.1.1)

h2o.confusionMatrix(trainedGBM.1.1)
h2o.auc(trainedGBM.1.1, valid=TRUE)
h2o.confusionMatrix(trainedGBM.1.1, newdata=test.1.1)

h2o.confusionMatrix(trainedDRF.1.1)
h2o.auc(trainedDRF.1.1, valid=TRUE)
h2o.confusionMatrix(trainedDRF.1.1, newdata=test.1.1)

h2o.confusionMatrix(trainedGLM.1.1)
h2o.auc(trainedGLM.1.1, valid=TRUE)
h2o.confusionMatrix(trainedGLM.1.1, newdata=test.1.1)

====================================================================================================================================

h2o.performance(trainedDL, train=T)
h2o.performance(trainedDL, valid=T)
h2o.performance(trainedDL, newdata=train)
h2o.performance(trainedDL, newdata=valid)
h2o.performance(trainedDL, newdata=test)
h2o.hit_ratio_table(trainedDL,valid = T)[1,2]

====================================================================================================================================

fpr = m_binomial@model$training_metrics@metrics$thresholds_and_metric_scores$fpr
tpr = m_binomial@model$training_metrics@metrics$thresholds_and_metric_scores$tpr
fpr_val = m_binomial@model$validation_metrics@metrics$thresholds_and_metric_scores$fpr
tpr_val = m_binomial@model$validation_metrics@metrics$thresholds_and_metric_scores$tpr
plot(fpr,tpr, type='l')
title('AUC')
lines(fpr_val,tpr_val,type='l',col='red')
legend("bottomright",c("Train", "Validation"),col=c("black","red"),lty=c(1,1),lwd=c(3,3))

====================================================================================================================================

h2o.auc(m_binomial,valid=FALSE) # on train                   
h2o.auc(m_binomial,valid=TRUE)  # on test